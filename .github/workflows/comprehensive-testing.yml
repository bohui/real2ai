name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_real2ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        test-suite: ["unit", "integration", "security"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}-${{ hashFiles('backend/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .
        
    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        mkdir -p test_reports
        mkdir -p storage/documents/temp
        
    - name: Run linting
      working-directory: ./backend
      run: |
        python -m flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 --output-file=test_reports/flake8_report.txt || true
        
    - name: Run type checking
      working-directory: ./backend
      run: |
        python -m mypy app/ --config-file=pyproject.toml --junit-xml=test_reports/mypy_results.xml || true
        
    - name: Run ${{ matrix.test-suite }} tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_real2ai
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
        SECRET_KEY: test_secret_key_for_ci_testing_only
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        case ${{ matrix.test-suite }} in
          "unit")
            python -m pytest tests/unit/ -v \
              --cov=app \
              --cov-report=html:test_reports/unit_coverage_html \
              --cov-report=xml:test_reports/unit_coverage.xml \
              --cov-report=term-missing \
              --junit-xml=test_reports/unit_results.xml \
              --cov-fail-under=80 \
              -m "unit or not integration"
            ;;
          "integration")
            python -m pytest tests/integration/ -v \
              --junit-xml=test_reports/integration_results.xml \
              -m "integration"
            ;;
          "security")
            python -m pytest tests/security/ -v \
              --junit-xml=test_reports/security_results.xml \
              --tb=short
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results-${{ matrix.python-version }}-${{ matrix.test-suite }}
        path: |
          backend/test_reports/
          backend/htmlcov/
        retention-days: 30
        
    - name: Upload coverage to Codecov
      if: matrix.test-suite == 'unit' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: backend/test_reports/unit_coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ["18", "20"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Run tests with coverage
      working-directory: ./frontend
      run: npm run test:coverage -- --run
      
    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results-${{ matrix.node-version }}
        path: |
          frontend/coverage/
        retention-days: 30
        
    - name: Upload frontend coverage to Codecov
      if: matrix.node-version == '20'
      uses: codecov/codecov-action@v3
      with:
        directory: frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[performance]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_real2ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .
        
    - name: Run performance tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_real2ai
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
        SECRET_KEY: test_secret_key_for_ci_testing_only
      run: |
        python -m pytest tests/performance/ -v \
          --junit-xml=test_reports/performance_results.xml \
          -m "not slow" \
          --tb=short
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: backend/test_reports/performance_results.xml
        retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install
      
    - name: Start backend server
      working-directory: ./backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview -- --port 3000 &
        sleep 5
        
    - name: Run E2E tests
      working-directory: ./frontend
      run: npx playwright test
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Run dependency security check
      working-directory: ./backend
      run: |
        safety check --json --output safety_report.json || true
        
    - name: Run static security analysis
      working-directory: ./backend
      run: |
        bandit -r app/ -f json -o bandit_report.json || true
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep_report.json . || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          backend/safety_report.json
          backend/bandit_report.json
          semgrep_report.json
        retention-days: 30

  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: real2ai-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-backend -p 8000:8000 \
          -e DATABASE_URL=sqlite:///test.db \
          -e REDIS_URL=redis://localhost:6379 \
          real2ai-backend:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-backend

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test artifacts
        backend_artifacts=$(find . -name "*backend-test-results*" | wc -l)
        frontend_artifacts=$(find . -name "*frontend-test-results*" | wc -l)
        
        echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Test suites run: $backend_artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY  
        echo "- Test suites run: $frontend_artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add links to coverage reports
        echo "### Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Backend coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Test Results Summary')
          );
          
          const body = `## 🧪 Test Results Summary
          
          **Backend Tests**: Completed across multiple Python versions
          **Frontend Tests**: Completed across Node.js versions
          **Security Scans**: ${process.env.GITHUB_EVENT_NAME === 'schedule' ? 'Completed' : 'Skipped (not scheduled)'}
          **Performance Tests**: ${process.env.GITHUB_EVENT_NAME === 'schedule' ? 'Completed' : 'Skipped (not scheduled)'}
          
          📊 Detailed results available in the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          
          _Updated: ${new Date().toISOString()}_`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          }