"""Report generation tasks for contract analysis results."""

import logging
from typing import Dict, Any

from app.core.celery import celery_app
from app.core.task_context import user_aware_task
from app.core.auth_context import AuthContext

logger = logging.getLogger(__name__)


@celery_app.task(bind=True)
@user_aware_task
async def generate_pdf_report(self, analysis_data: Dict[str, Any]) -> bytes:
    """Generate PDF report from analysis data - USER AWARE VERSION

    This task generates a PDF report from contract analysis results,
    maintaining user authentication context throughout execution.
    """
    try:
        logger.info("Starting PDF report generation")

        # Verify user context if user_id is provided in analysis_data
        if "user_id" in analysis_data:
            context_user_id = AuthContext.get_user_id()
            if context_user_id != analysis_data["user_id"]:
                raise ValueError(
                    f"User context mismatch: expected {analysis_data['user_id']}, got {context_user_id}"
                )

        # For now, return a structured text report until reportlab is added
        report_content = f"""
CONTRACT ANALYSIS REPORT
========================

Document: {analysis_data.get('filename', 'Unknown')}
Analysis Date: {analysis_data.get('analysis_date', 'Unknown')}
Risk Score: {analysis_data.get('risk_score', 'N/A')}

Executive Summary:
{analysis_data.get('executive_summary', 'No summary available')}

Recommendations:
{chr(10).join(f'- {rec}' for rec in analysis_data.get('recommendations', []))}

Generated by Real2.AI Contract Analysis Platform
        """.strip()

        logger.info("PDF report generation completed")
        return report_content.encode("utf-8")

    except Exception as e:
        logger.error(f"PDF report generation failed: {str(e)}")
        raise Exception(f"Report generation failed: {str(e)}")